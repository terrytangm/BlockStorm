using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts;
using System.Threading;

namespace BlockStorm.NethereumModule.Contracts.PinkLock02
{


    public class PinkLock02Console
    {
        public static async Task Main()
        {
            var url = "http://testchain.nethereum.com:8545";
            //var url = "https://mainnet.infura.io";
            var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
            var account = new Nethereum.Web3.Accounts.Account(privateKey);
            var web3 = new Web3(account, url);

            /* Deployment 
           var pinkLock02Deployment = new PinkLock02Deployment();

           var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<PinkLock02Deployment>().SendRequestAndWaitForReceiptAsync(pinkLock02Deployment);
           var contractAddress = transactionReceiptDeployment.ContractAddress;
            */
            var contractHandler = web3.Eth.GetContractHandler("contractAddress");

            /** Function: allLpTokenLockedCount**/
            /*
            var allLpTokenLockedCountFunctionReturn = await contractHandler.QueryAsync<AllLpTokenLockedCountFunction, BigInteger>();
            */


            /** Function: allNormalTokenLockedCount**/
            /*
            var allNormalTokenLockedCountFunctionReturn = await contractHandler.QueryAsync<AllNormalTokenLockedCountFunction, BigInteger>();
            */


            /** Function: cumulativeLockInfo**/
            /*
            var cumulativeLockInfoFunction = new CumulativeLockInfoFunction(); 
            cumulativeLockInfoFunction.ReturnValue1 = returnValue1;
            var cumulativeLockInfoOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<CumulativeLockInfoFunction, CumulativeLockInfoOutputDTO>(cumulativeLockInfoFunction);
            */


            /** Function: editLock**/
            /*
            var editLockFunction = new EditLockFunction();
            editLockFunction.LockId = lockId;
            editLockFunction.NewAmount = newAmount;
            editLockFunction.NewUnlockDate = newUnlockDate;
            var editLockFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(editLockFunction);
            */


            /** Function: editLockDescription**/
            /*
            var editLockDescriptionFunction = new EditLockDescriptionFunction();
            editLockDescriptionFunction.LockId = lockId;
            editLockDescriptionFunction.Description = description;
            var editLockDescriptionFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(editLockDescriptionFunction);
            */


            /** Function: getCumulativeLpTokenLockInfo**/
            /*
            var getCumulativeLpTokenLockInfoFunction = new GetCumulativeLpTokenLockInfoFunction(); 
            getCumulativeLpTokenLockInfoFunction.Start = start;
            getCumulativeLpTokenLockInfoFunction.End = end;
            var getCumulativeLpTokenLockInfoOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetCumulativeLpTokenLockInfoFunction, GetCumulativeLpTokenLockInfoOutputDTO>(getCumulativeLpTokenLockInfoFunction);
            */


            /** Function: getCumulativeLpTokenLockInfoAt**/
            /*
            var getCumulativeLpTokenLockInfoAtFunction = new GetCumulativeLpTokenLockInfoAtFunction(); 
            getCumulativeLpTokenLockInfoAtFunction.Index = index;
            var getCumulativeLpTokenLockInfoAtOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetCumulativeLpTokenLockInfoAtFunction, GetCumulativeLpTokenLockInfoAtOutputDTO>(getCumulativeLpTokenLockInfoAtFunction);
            */


            /** Function: getCumulativeNormalTokenLockInfo**/
            /*
            var getCumulativeNormalTokenLockInfoFunction = new GetCumulativeNormalTokenLockInfoFunction(); 
            getCumulativeNormalTokenLockInfoFunction.Start = start;
            getCumulativeNormalTokenLockInfoFunction.End = end;
            var getCumulativeNormalTokenLockInfoOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetCumulativeNormalTokenLockInfoFunction, GetCumulativeNormalTokenLockInfoOutputDTO>(getCumulativeNormalTokenLockInfoFunction);
            */


            /** Function: getCumulativeNormalTokenLockInfoAt**/
            /*
            var getCumulativeNormalTokenLockInfoAtFunction = new GetCumulativeNormalTokenLockInfoAtFunction(); 
            getCumulativeNormalTokenLockInfoAtFunction.Index = index;
            var getCumulativeNormalTokenLockInfoAtOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetCumulativeNormalTokenLockInfoAtFunction, GetCumulativeNormalTokenLockInfoAtOutputDTO>(getCumulativeNormalTokenLockInfoAtFunction);
            */


            /** Function: getLockAt**/
            /*
            var getLockAtFunction = new GetLockAtFunction(); 
            getLockAtFunction.Index = index;
            var getLockAtOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetLockAtFunction, GetLockAtOutputDTO>(getLockAtFunction);
            */


            /** Function: getLockById**/
            /*
            var getLockByIdFunction = new GetLockByIdFunction(); 
            getLockByIdFunction.LockId = lockId;
            var getLockByIdOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetLockByIdFunction, GetLockByIdOutputDTO>(getLockByIdFunction);
            */


            /** Function: getLocksForToken**/
            /*
            var getLocksForTokenFunction = new GetLocksForTokenFunction(); 
            getLocksForTokenFunction.Token = token;
            getLocksForTokenFunction.Start = start;
            getLocksForTokenFunction.End = end;
            var getLocksForTokenOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetLocksForTokenFunction, GetLocksForTokenOutputDTO>(getLocksForTokenFunction);
            */


            /** Function: getTotalLockCount**/
            /*
            var getTotalLockCountFunctionReturn = await contractHandler.QueryAsync<GetTotalLockCountFunction, BigInteger>();
            */


            /** Function: lock**/
            /*
            var @lockFunction = new LockFunction();
            @lockFunction.Owner = owner;
            @lockFunction.Token = token;
            @lockFunction.IsLpToken = isLpToken;
            @lockFunction.Amount = amount;
            @lockFunction.UnlockDate = unlockDate;
            @lockFunction.Description = description;
            var @lockFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(@lockFunction);
            */


            /** Function: lpLockCountForUser**/
            /*
            var lpLockCountForUserFunction = new LpLockCountForUserFunction();
            lpLockCountForUserFunction.User = user;
            var lpLockCountForUserFunctionReturn = await contractHandler.QueryAsync<LpLockCountForUserFunction, BigInteger>(lpLockCountForUserFunction);
            */


            /** Function: lpLockForUserAtIndex**/
            /*
            var lpLockForUserAtIndexFunction = new LpLockForUserAtIndexFunction(); 
            lpLockForUserAtIndexFunction.User = user;
            lpLockForUserAtIndexFunction.Index = index;
            var lpLockForUserAtIndexOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<LpLockForUserAtIndexFunction, LpLockForUserAtIndexOutputDTO>(lpLockForUserAtIndexFunction);
            */


            /** Function: lpLocksForUser**/
            /*
            var lpLocksForUserFunction = new LpLocksForUserFunction(); 
            lpLocksForUserFunction.User = user;
            var lpLocksForUserOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<LpLocksForUserFunction, LpLocksForUserOutputDTO>(lpLocksForUserFunction);
            */


            /** Function: multipleVestingLock**/
            /*
            var multipleVestingLockFunction = new MultipleVestingLockFunction();
            multipleVestingLockFunction.Owners = owners;
            multipleVestingLockFunction.Amounts = amounts;
            multipleVestingLockFunction.Token = token;
            multipleVestingLockFunction.IsLpToken = isLpToken;
            multipleVestingLockFunction.TgeDate = tgeDate;
            multipleVestingLockFunction.TgeBps = tgeBps;
            multipleVestingLockFunction.Cycle = cycle;
            multipleVestingLockFunction.CycleBps = cycleBps;
            multipleVestingLockFunction.Description = description;
            var multipleVestingLockFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(multipleVestingLockFunction);
            */


            /** Function: normalLockCountForUser**/
            /*
            var normalLockCountForUserFunction = new NormalLockCountForUserFunction();
            normalLockCountForUserFunction.User = user;
            var normalLockCountForUserFunctionReturn = await contractHandler.QueryAsync<NormalLockCountForUserFunction, BigInteger>(normalLockCountForUserFunction);
            */


            /** Function: normalLockForUserAtIndex**/
            /*
            var normalLockForUserAtIndexFunction = new NormalLockForUserAtIndexFunction(); 
            normalLockForUserAtIndexFunction.User = user;
            normalLockForUserAtIndexFunction.Index = index;
            var normalLockForUserAtIndexOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<NormalLockForUserAtIndexFunction, NormalLockForUserAtIndexOutputDTO>(normalLockForUserAtIndexFunction);
            */


            /** Function: normalLocksForUser**/
            /*
            var normalLocksForUserFunction = new NormalLocksForUserFunction(); 
            normalLocksForUserFunction.User = user;
            var normalLocksForUserOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<NormalLocksForUserFunction, NormalLocksForUserOutputDTO>(normalLocksForUserFunction);
            */


            /** Function: renounceLockOwnership**/
            /*
            var renounceLockOwnershipFunction = new RenounceLockOwnershipFunction();
            renounceLockOwnershipFunction.LockId = lockId;
            var renounceLockOwnershipFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(renounceLockOwnershipFunction);
            */


            /** Function: totalLockCountForToken**/
            /*
            var totalLockCountForTokenFunction = new TotalLockCountForTokenFunction();
            totalLockCountForTokenFunction.Token = token;
            var totalLockCountForTokenFunctionReturn = await contractHandler.QueryAsync<TotalLockCountForTokenFunction, BigInteger>(totalLockCountForTokenFunction);
            */


            /** Function: totalLockCountForUser**/
            /*
            var totalLockCountForUserFunction = new TotalLockCountForUserFunction();
            totalLockCountForUserFunction.User = user;
            var totalLockCountForUserFunctionReturn = await contractHandler.QueryAsync<TotalLockCountForUserFunction, BigInteger>(totalLockCountForUserFunction);
            */


            /** Function: totalTokenLockedCount**/
            /*
            var totalTokenLockedCountFunctionReturn = await contractHandler.QueryAsync<TotalTokenLockedCountFunction, BigInteger>();
            */


            /** Function: transferLockOwnership**/
            /*
            var transferLockOwnershipFunction = new TransferLockOwnershipFunction();
            transferLockOwnershipFunction.LockId = lockId;
            transferLockOwnershipFunction.NewOwner = newOwner;
            var transferLockOwnershipFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(transferLockOwnershipFunction);
            */


            /** Function: unlock**/
            /*
            var unlockFunction = new UnlockFunction();
            unlockFunction.LockId = lockId;
            var unlockFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(unlockFunction);
            */


            /** Function: vestingLock**/
            /*
            var vestingLockFunction = new VestingLockFunction();
            vestingLockFunction.Owner = owner;
            vestingLockFunction.Token = token;
            vestingLockFunction.IsLpToken = isLpToken;
            vestingLockFunction.Amount = amount;
            vestingLockFunction.TgeDate = tgeDate;
            vestingLockFunction.TgeBps = tgeBps;
            vestingLockFunction.Cycle = cycle;
            vestingLockFunction.CycleBps = cycleBps;
            vestingLockFunction.Description = description;
            var vestingLockFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(vestingLockFunction);
            */


            /** Function: withdrawableTokens**/
            /*
            var withdrawableTokensFunction = new WithdrawableTokensFunction();
            withdrawableTokensFunction.LockId = lockId;
            var withdrawableTokensFunctionReturn = await contractHandler.QueryAsync<WithdrawableTokensFunction, BigInteger>(withdrawableTokensFunction);
            */
        }

    }

    public partial class PinkLock02Deployment : PinkLock02DeploymentBase
    {
        public PinkLock02Deployment() : base(BYTECODE) { }
        public PinkLock02Deployment(string byteCode) : base(byteCode) { }
    }

    public class PinkLock02DeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "";
        public PinkLock02DeploymentBase() : base(BYTECODE) { }
        public PinkLock02DeploymentBase(string byteCode) : base(byteCode) { }

    }

    public partial class AllLpTokenLockedCountFunction : AllLpTokenLockedCountFunctionBase { }

    [Function("allLpTokenLockedCount", "uint256")]
    public class AllLpTokenLockedCountFunctionBase : FunctionMessage
    {

    }

    public partial class AllNormalTokenLockedCountFunction : AllNormalTokenLockedCountFunctionBase { }

    [Function("allNormalTokenLockedCount", "uint256")]
    public class AllNormalTokenLockedCountFunctionBase : FunctionMessage
    {

    }

    public partial class CumulativeLockInfoFunction : CumulativeLockInfoFunctionBase { }

    [Function("cumulativeLockInfo", typeof(CumulativeLockInfoOutputDTO))]
    public class CumulativeLockInfoFunctionBase : FunctionMessage
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class EditLockFunction : EditLockFunctionBase { }

    [Function("editLock")]
    public class EditLockFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "lockId", 1)]
        public virtual BigInteger LockId { get; set; }
        [Parameter("uint256", "newAmount", 2)]
        public virtual BigInteger NewAmount { get; set; }
        [Parameter("uint256", "newUnlockDate", 3)]
        public virtual BigInteger NewUnlockDate { get; set; }
    }

    public partial class EditLockDescriptionFunction : EditLockDescriptionFunctionBase { }

    [Function("editLockDescription")]
    public class EditLockDescriptionFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "lockId", 1)]
        public virtual BigInteger LockId { get; set; }
        [Parameter("string", "description", 2)]
        public virtual string Description { get; set; }
    }

    public partial class GetCumulativeLpTokenLockInfoFunction : GetCumulativeLpTokenLockInfoFunctionBase { }

    [Function("getCumulativeLpTokenLockInfo", typeof(GetCumulativeLpTokenLockInfoOutputDTO))]
    public class GetCumulativeLpTokenLockInfoFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "start", 1)]
        public virtual BigInteger Start { get; set; }
        [Parameter("uint256", "end", 2)]
        public virtual BigInteger End { get; set; }
    }

    public partial class GetCumulativeLpTokenLockInfoAtFunction : GetCumulativeLpTokenLockInfoAtFunctionBase { }

    [Function("getCumulativeLpTokenLockInfoAt", typeof(GetCumulativeLpTokenLockInfoAtOutputDTO))]
    public class GetCumulativeLpTokenLockInfoAtFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "index", 1)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class GetCumulativeNormalTokenLockInfoFunction : GetCumulativeNormalTokenLockInfoFunctionBase { }

    [Function("getCumulativeNormalTokenLockInfo", typeof(GetCumulativeNormalTokenLockInfoOutputDTO))]
    public class GetCumulativeNormalTokenLockInfoFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "start", 1)]
        public virtual BigInteger Start { get; set; }
        [Parameter("uint256", "end", 2)]
        public virtual BigInteger End { get; set; }
    }

    public partial class GetCumulativeNormalTokenLockInfoAtFunction : GetCumulativeNormalTokenLockInfoAtFunctionBase { }

    [Function("getCumulativeNormalTokenLockInfoAt", typeof(GetCumulativeNormalTokenLockInfoAtOutputDTO))]
    public class GetCumulativeNormalTokenLockInfoAtFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "index", 1)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class GetLockAtFunction : GetLockAtFunctionBase { }

    [Function("getLockAt", typeof(GetLockAtOutputDTO))]
    public class GetLockAtFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "index", 1)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class GetLockByIdFunction : GetLockByIdFunctionBase { }

    [Function("getLockById", typeof(GetLockByIdOutputDTO))]
    public class GetLockByIdFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "lockId", 1)]
        public virtual BigInteger LockId { get; set; }
    }

    public partial class GetLocksForTokenFunction : GetLocksForTokenFunctionBase { }

    [Function("getLocksForToken", typeof(GetLocksForTokenOutputDTO))]
    public class GetLocksForTokenFunctionBase : FunctionMessage
    {
        [Parameter("address", "token", 1)]
        public virtual string Token { get; set; }
        [Parameter("uint256", "start", 2)]
        public virtual BigInteger Start { get; set; }
        [Parameter("uint256", "end", 3)]
        public virtual BigInteger End { get; set; }
    }

    public partial class GetTotalLockCountFunction : GetTotalLockCountFunctionBase { }

    [Function("getTotalLockCount", "uint256")]
    public class GetTotalLockCountFunctionBase : FunctionMessage
    {

    }

    public partial class LockFunction : LockFunctionBase { }

    [Function("lock", "uint256")]
    public class LockFunctionBase : FunctionMessage
    {
        [Parameter("address", "owner", 1)]
        public virtual string Owner { get; set; }
        [Parameter("address", "token", 2)]
        public virtual string Token { get; set; }
        [Parameter("bool", "isLpToken", 3)]
        public virtual bool IsLpToken { get; set; }
        [Parameter("uint256", "amount", 4)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "unlockDate", 5)]
        public virtual BigInteger UnlockDate { get; set; }
        [Parameter("string", "description", 6)]
        public virtual string Description { get; set; }
    }

    public partial class LpLockCountForUserFunction : LpLockCountForUserFunctionBase { }

    [Function("lpLockCountForUser", "uint256")]
    public class LpLockCountForUserFunctionBase : FunctionMessage
    {
        [Parameter("address", "user", 1)]
        public virtual string User { get; set; }
    }

    public partial class LpLockForUserAtIndexFunction : LpLockForUserAtIndexFunctionBase { }

    [Function("lpLockForUserAtIndex", typeof(LpLockForUserAtIndexOutputDTO))]
    public class LpLockForUserAtIndexFunctionBase : FunctionMessage
    {
        [Parameter("address", "user", 1)]
        public virtual string User { get; set; }
        [Parameter("uint256", "index", 2)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class LpLocksForUserFunction : LpLocksForUserFunctionBase { }

    [Function("lpLocksForUser", typeof(LpLocksForUserOutputDTO))]
    public class LpLocksForUserFunctionBase : FunctionMessage
    {
        [Parameter("address", "user", 1)]
        public virtual string User { get; set; }
    }

    public partial class MultipleVestingLockFunction : MultipleVestingLockFunctionBase { }

    [Function("multipleVestingLock", "uint256[]")]
    public class MultipleVestingLockFunctionBase : FunctionMessage
    {
        [Parameter("address[]", "owners", 1)]
        public virtual List<string> Owners { get; set; }
        [Parameter("uint256[]", "amounts", 2)]
        public virtual List<BigInteger> Amounts { get; set; }
        [Parameter("address", "token", 3)]
        public virtual string Token { get; set; }
        [Parameter("bool", "isLpToken", 4)]
        public virtual bool IsLpToken { get; set; }
        [Parameter("uint256", "tgeDate", 5)]
        public virtual BigInteger TgeDate { get; set; }
        [Parameter("uint256", "tgeBps", 6)]
        public virtual BigInteger TgeBps { get; set; }
        [Parameter("uint256", "cycle", 7)]
        public virtual BigInteger Cycle { get; set; }
        [Parameter("uint256", "cycleBps", 8)]
        public virtual BigInteger CycleBps { get; set; }
        [Parameter("string", "description", 9)]
        public virtual string Description { get; set; }
    }

    public partial class NormalLockCountForUserFunction : NormalLockCountForUserFunctionBase { }

    [Function("normalLockCountForUser", "uint256")]
    public class NormalLockCountForUserFunctionBase : FunctionMessage
    {
        [Parameter("address", "user", 1)]
        public virtual string User { get; set; }
    }

    public partial class NormalLockForUserAtIndexFunction : NormalLockForUserAtIndexFunctionBase { }

    [Function("normalLockForUserAtIndex", typeof(NormalLockForUserAtIndexOutputDTO))]
    public class NormalLockForUserAtIndexFunctionBase : FunctionMessage
    {
        [Parameter("address", "user", 1)]
        public virtual string User { get; set; }
        [Parameter("uint256", "index", 2)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class NormalLocksForUserFunction : NormalLocksForUserFunctionBase { }

    [Function("normalLocksForUser", typeof(NormalLocksForUserOutputDTO))]
    public class NormalLocksForUserFunctionBase : FunctionMessage
    {
        [Parameter("address", "user", 1)]
        public virtual string User { get; set; }
    }

    public partial class RenounceLockOwnershipFunction : RenounceLockOwnershipFunctionBase { }

    [Function("renounceLockOwnership")]
    public class RenounceLockOwnershipFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "lockId", 1)]
        public virtual BigInteger LockId { get; set; }
    }

    public partial class TotalLockCountForTokenFunction : TotalLockCountForTokenFunctionBase { }

    [Function("totalLockCountForToken", "uint256")]
    public class TotalLockCountForTokenFunctionBase : FunctionMessage
    {
        [Parameter("address", "token", 1)]
        public virtual string Token { get; set; }
    }

    public partial class TotalLockCountForUserFunction : TotalLockCountForUserFunctionBase { }

    [Function("totalLockCountForUser", "uint256")]
    public class TotalLockCountForUserFunctionBase : FunctionMessage
    {
        [Parameter("address", "user", 1)]
        public virtual string User { get; set; }
    }

    public partial class TotalTokenLockedCountFunction : TotalTokenLockedCountFunctionBase { }

    [Function("totalTokenLockedCount", "uint256")]
    public class TotalTokenLockedCountFunctionBase : FunctionMessage
    {

    }

    public partial class TransferLockOwnershipFunction : TransferLockOwnershipFunctionBase { }

    [Function("transferLockOwnership")]
    public class TransferLockOwnershipFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "lockId", 1)]
        public virtual BigInteger LockId { get; set; }
        [Parameter("address", "newOwner", 2)]
        public virtual string NewOwner { get; set; }
    }

    public partial class UnlockFunction : UnlockFunctionBase { }

    [Function("unlock")]
    public class UnlockFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "lockId", 1)]
        public virtual BigInteger LockId { get; set; }
    }

    public partial class VestingLockFunction : VestingLockFunctionBase { }

    [Function("vestingLock", "uint256")]
    public class VestingLockFunctionBase : FunctionMessage
    {
        [Parameter("address", "owner", 1)]
        public virtual string Owner { get; set; }
        [Parameter("address", "token", 2)]
        public virtual string Token { get; set; }
        [Parameter("bool", "isLpToken", 3)]
        public virtual bool IsLpToken { get; set; }
        [Parameter("uint256", "amount", 4)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "tgeDate", 5)]
        public virtual BigInteger TgeDate { get; set; }
        [Parameter("uint256", "tgeBps", 6)]
        public virtual BigInteger TgeBps { get; set; }
        [Parameter("uint256", "cycle", 7)]
        public virtual BigInteger Cycle { get; set; }
        [Parameter("uint256", "cycleBps", 8)]
        public virtual BigInteger CycleBps { get; set; }
        [Parameter("string", "description", 9)]
        public virtual string Description { get; set; }
    }

    public partial class WithdrawableTokensFunction : WithdrawableTokensFunctionBase { }

    [Function("withdrawableTokens", "uint256")]
    public class WithdrawableTokensFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "lockId", 1)]
        public virtual BigInteger LockId { get; set; }
    }

    public partial class LockAddedEventDTO : LockAddedEventDTOBase { }

    [Event("LockAdded")]
    public class LockAddedEventDTOBase : IEventDTO
    {
        [Parameter("uint256", "id", 1, true)]
        public virtual BigInteger Id { get; set; }
        [Parameter("address", "token", 2, false)]
        public virtual string Token { get; set; }
        [Parameter("address", "owner", 3, false)]
        public virtual string Owner { get; set; }
        [Parameter("uint256", "amount", 4, false)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "unlockDate", 5, false)]
        public virtual BigInteger UnlockDate { get; set; }
    }

    public partial class LockDescriptionChangedEventDTO : LockDescriptionChangedEventDTOBase { }

    [Event("LockDescriptionChanged")]
    public class LockDescriptionChangedEventDTOBase : IEventDTO
    {
        [Parameter("uint256", "lockId", 1, false)]
        public virtual BigInteger LockId { get; set; }
    }

    public partial class LockOwnerChangedEventDTO : LockOwnerChangedEventDTOBase { }

    [Event("LockOwnerChanged")]
    public class LockOwnerChangedEventDTOBase : IEventDTO
    {
        [Parameter("uint256", "lockId", 1, false)]
        public virtual BigInteger LockId { get; set; }
        [Parameter("address", "owner", 2, false)]
        public virtual string Owner { get; set; }
        [Parameter("address", "newOwner", 3, false)]
        public virtual string NewOwner { get; set; }
    }

    public partial class LockRemovedEventDTO : LockRemovedEventDTOBase { }

    [Event("LockRemoved")]
    public class LockRemovedEventDTOBase : IEventDTO
    {
        [Parameter("uint256", "id", 1, true)]
        public virtual BigInteger Id { get; set; }
        [Parameter("address", "token", 2, false)]
        public virtual string Token { get; set; }
        [Parameter("address", "owner", 3, false)]
        public virtual string Owner { get; set; }
        [Parameter("uint256", "amount", 4, false)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "unlockedAt", 5, false)]
        public virtual BigInteger UnlockedAt { get; set; }
    }

    public partial class LockUpdatedEventDTO : LockUpdatedEventDTOBase { }

    [Event("LockUpdated")]
    public class LockUpdatedEventDTOBase : IEventDTO
    {
        [Parameter("uint256", "id", 1, true)]
        public virtual BigInteger Id { get; set; }
        [Parameter("address", "token", 2, false)]
        public virtual string Token { get; set; }
        [Parameter("address", "owner", 3, false)]
        public virtual string Owner { get; set; }
        [Parameter("uint256", "newAmount", 4, false)]
        public virtual BigInteger NewAmount { get; set; }
        [Parameter("uint256", "newUnlockDate", 5, false)]
        public virtual BigInteger NewUnlockDate { get; set; }
    }

    public partial class LockVestedEventDTO : LockVestedEventDTOBase { }

    [Event("LockVested")]
    public class LockVestedEventDTOBase : IEventDTO
    {
        [Parameter("uint256", "id", 1, true)]
        public virtual BigInteger Id { get; set; }
        [Parameter("address", "token", 2, false)]
        public virtual string Token { get; set; }
        [Parameter("address", "owner", 3, false)]
        public virtual string Owner { get; set; }
        [Parameter("uint256", "amount", 4, false)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "remaining", 5, false)]
        public virtual BigInteger Remaining { get; set; }
        [Parameter("uint256", "timestamp", 6, false)]
        public virtual BigInteger Timestamp { get; set; }
    }

    public partial class AllLpTokenLockedCountOutputDTO : AllLpTokenLockedCountOutputDTOBase { }

    [FunctionOutput]
    public class AllLpTokenLockedCountOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class AllNormalTokenLockedCountOutputDTO : AllNormalTokenLockedCountOutputDTOBase { }

    [FunctionOutput]
    public class AllNormalTokenLockedCountOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class CumulativeLockInfoOutputDTO : CumulativeLockInfoOutputDTOBase { }

    [FunctionOutput]
    public class CumulativeLockInfoOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("address", "token", 1)]
        public virtual string Token { get; set; }
        [Parameter("address", "factory", 2)]
        public virtual string Factory { get; set; }
        [Parameter("uint256", "amount", 3)]
        public virtual BigInteger Amount { get; set; }
    }





    public partial class GetCumulativeLpTokenLockInfoOutputDTO : GetCumulativeLpTokenLockInfoOutputDTOBase { }

    [FunctionOutput]
    public class GetCumulativeLpTokenLockInfoOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<CumulativeLockInfo> ReturnValue1 { get; set; }
    }

    public partial class GetCumulativeLpTokenLockInfoAtOutputDTO : GetCumulativeLpTokenLockInfoAtOutputDTOBase { }

    [FunctionOutput]
    public class GetCumulativeLpTokenLockInfoAtOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual CumulativeLockInfo ReturnValue1 { get; set; }
    }

    public partial class GetCumulativeNormalTokenLockInfoOutputDTO : GetCumulativeNormalTokenLockInfoOutputDTOBase { }

    [FunctionOutput]
    public class GetCumulativeNormalTokenLockInfoOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<CumulativeLockInfo> ReturnValue1 { get; set; }
    }

    public partial class GetCumulativeNormalTokenLockInfoAtOutputDTO : GetCumulativeNormalTokenLockInfoAtOutputDTOBase { }

    [FunctionOutput]
    public class GetCumulativeNormalTokenLockInfoAtOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual CumulativeLockInfo ReturnValue1 { get; set; }
    }

    public partial class GetLockAtOutputDTO : GetLockAtOutputDTOBase { }

    [FunctionOutput]
    public class GetLockAtOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual Lock ReturnValue1 { get; set; }
    }

    public partial class GetLockByIdOutputDTO : GetLockByIdOutputDTOBase { }

    [FunctionOutput]
    public class GetLockByIdOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual Lock ReturnValue1 { get; set; }
    }

    public partial class GetLocksForTokenOutputDTO : GetLocksForTokenOutputDTOBase { }

    [FunctionOutput]
    public class GetLocksForTokenOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<Lock> ReturnValue1 { get; set; }
    }

    public partial class GetTotalLockCountOutputDTO : GetTotalLockCountOutputDTOBase { }

    [FunctionOutput]
    public class GetTotalLockCountOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }



    public partial class LpLockCountForUserOutputDTO : LpLockCountForUserOutputDTOBase { }

    [FunctionOutput]
    public class LpLockCountForUserOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class LpLockForUserAtIndexOutputDTO : LpLockForUserAtIndexOutputDTOBase { }

    [FunctionOutput]
    public class LpLockForUserAtIndexOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual Lock ReturnValue1 { get; set; }
    }

    public partial class LpLocksForUserOutputDTO : LpLocksForUserOutputDTOBase { }

    [FunctionOutput]
    public class LpLocksForUserOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<Lock> ReturnValue1 { get; set; }
    }



    public partial class NormalLockCountForUserOutputDTO : NormalLockCountForUserOutputDTOBase { }

    [FunctionOutput]
    public class NormalLockCountForUserOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class NormalLockForUserAtIndexOutputDTO : NormalLockForUserAtIndexOutputDTOBase { }

    [FunctionOutput]
    public class NormalLockForUserAtIndexOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual Lock ReturnValue1 { get; set; }
    }

    public partial class NormalLocksForUserOutputDTO : NormalLocksForUserOutputDTOBase { }

    [FunctionOutput]
    public class NormalLocksForUserOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<Lock> ReturnValue1 { get; set; }
    }



    public partial class TotalLockCountForTokenOutputDTO : TotalLockCountForTokenOutputDTOBase { }

    [FunctionOutput]
    public class TotalLockCountForTokenOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class TotalLockCountForUserOutputDTO : TotalLockCountForUserOutputDTOBase { }

    [FunctionOutput]
    public class TotalLockCountForUserOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class TotalTokenLockedCountOutputDTO : TotalTokenLockedCountOutputDTOBase { }

    [FunctionOutput]
    public class TotalTokenLockedCountOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }







    public partial class WithdrawableTokensOutputDTO : WithdrawableTokensOutputDTOBase { }

    [FunctionOutput]
    public class WithdrawableTokensOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class CumulativeLockInfo : CumulativeLockInfoBase { }

    public class CumulativeLockInfoBase
    {
        [Parameter("address", "token", 1)]
        public virtual string Token { get; set; }
        [Parameter("address", "factory", 2)]
        public virtual string Factory { get; set; }
        [Parameter("uint256", "amount", 3)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class Lock : LockBase { }

    public class LockBase
    {
        [Parameter("uint256", "id", 1)]
        public virtual BigInteger Id { get; set; }
        [Parameter("address", "token", 2)]
        public virtual string Token { get; set; }
        [Parameter("address", "owner", 3)]
        public virtual string Owner { get; set; }
        [Parameter("uint256", "amount", 4)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "lockDate", 5)]
        public virtual BigInteger LockDate { get; set; }
        [Parameter("uint256", "tgeDate", 6)]
        public virtual BigInteger TgeDate { get; set; }
        [Parameter("uint256", "tgeBps", 7)]
        public virtual BigInteger TgeBps { get; set; }
        [Parameter("uint256", "cycle", 8)]
        public virtual BigInteger Cycle { get; set; }
        [Parameter("uint256", "cycleBps", 9)]
        public virtual BigInteger CycleBps { get; set; }
        [Parameter("uint256", "unlockedAmount", 10)]
        public virtual BigInteger UnlockedAmount { get; set; }
        [Parameter("string", "description", 11)]
        public virtual string Description { get; set; }
    }
}
