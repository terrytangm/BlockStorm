using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts;
using System.Threading;

namespace BlockStorm.NethereumModule.Contracts.LoopArbitrage
{


    public class LoopArbitrageConsole
    {
        public static async Task Main()
        {
            var url = "http://testchain.nethereum.com:8545";
            //var url = "https://mainnet.infura.io";
            var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
            var account = new Nethereum.Web3.Accounts.Account(privateKey);
            var web3 = new Web3(account, url);

            /* Deployment 
           var loopArbitrageDeployment = new LoopArbitrageDeployment();

           var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<LoopArbitrageDeployment>().SendRequestAndWaitForReceiptAsync(loopArbitrageDeployment);
           var contractAddress = transactionReceiptDeployment.ContractAddress;
            */
            var contractHandler = web3.Eth.GetContractHandler("contractAddress");

            /** Function: DooarSwapV2Call**/
            /*
            var dooarSwapV2CallFunction = new DooarSwapV2CallFunction();
            dooarSwapV2CallFunction.Sender = sender;
            dooarSwapV2CallFunction.Amount0 = amount0;
            dooarSwapV2CallFunction.Amount1 = amount1;
            dooarSwapV2CallFunction.Data = data;
            var dooarSwapV2CallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(dooarSwapV2CallFunction);
            */


            /** Function: FlashloanArbitrageDebugCall**/
            /*
            var flashloanArbitrageDebugCallFunction = new FlashloanArbitrageDebugCallFunction();
            flashloanArbitrageDebugCallFunction.TokenBorrow = tokenBorrow;
            flashloanArbitrageDebugCallFunction.PairBorrow = pairBorrow;
            flashloanArbitrageDebugCallFunction.LoanFee = loanFee;
            flashloanArbitrageDebugCallFunction.Amount = amount;
            flashloanArbitrageDebugCallFunction.AmountOutMin = amountOutMin;
            flashloanArbitrageDebugCallFunction.SwapFees = swapFees;
            flashloanArbitrageDebugCallFunction.Pairs = pairs;
            flashloanArbitrageDebugCallFunction.DexNameForLoan = dexNameForLoan;
            var flashloanArbitrageDebugCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(flashloanArbitrageDebugCallFunction);
            */


            /** Function: FlashloanUniswapV2**/
            /*
            var flashloanUniswapV2Function = new FlashloanUniswapV2Function();
            flashloanUniswapV2Function.TokenBorrow = tokenBorrow;
            flashloanUniswapV2Function.PairBorrow = pairBorrow;
            flashloanUniswapV2Function.LoanFee = loanFee;
            flashloanUniswapV2Function.Amount = amount;
            flashloanUniswapV2Function.AmountOutMin = amountOutMin;
            flashloanUniswapV2Function.SwapFees = swapFees;
            flashloanUniswapV2Function.Pairs = pairs;
            flashloanUniswapV2Function.DexNameForLoan = dexNameForLoan;
            var flashloanUniswapV2FunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(flashloanUniswapV2Function);
            */


            /** Function: LoopArbitrageV1DirectCall**/
            /*
            var loopArbitrageV1DirectCallFunction = new LoopArbitrageV1DirectCallFunction();
            loopArbitrageV1DirectCallFunction.AmountIn = amountIn;
            loopArbitrageV1DirectCallFunction.AmountOutMin = amountOutMin;
            loopArbitrageV1DirectCallFunction.Token = token;
            loopArbitrageV1DirectCallFunction.SwapFees = swapFees;
            loopArbitrageV1DirectCallFunction.Pairs = pairs;
            var loopArbitrageV1DirectCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(loopArbitrageV1DirectCallFunction);
            */


            /** Function: PepeDexCall**/
            /*
            var pepeDexCallFunction = new PepeDexCallFunction();
            pepeDexCallFunction.Sender = sender;
            pepeDexCallFunction.Amount0 = amount0;
            pepeDexCallFunction.Amount1 = amount1;
            pepeDexCallFunction.Data = data;
            var pepeDexCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(pepeDexCallFunction);
            */


            /** Function: SaitaSwapCall**/
            /*
            var saitaSwapCallFunction = new SaitaSwapCallFunction();
            saitaSwapCallFunction.Sender = sender;
            saitaSwapCallFunction.Amount0 = amount0;
            saitaSwapCallFunction.Amount1 = amount1;
            saitaSwapCallFunction.Data = data;
            var saitaSwapCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(saitaSwapCallFunction);
            */


            /** Function: SakeSwapCall**/
            /*
            var sakeSwapCallFunction = new SakeSwapCallFunction();
            sakeSwapCallFunction.Sender = sender;
            sakeSwapCallFunction.Amount0 = amount0;
            sakeSwapCallFunction.Amount1 = amount1;
            sakeSwapCallFunction.Data = data;
            var sakeSwapCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(sakeSwapCallFunction);
            */


            /** Function: addOperators**/
            /*
            var addOperatorsFunction = new AddOperatorsFunction();
            addOperatorsFunction.Operators = operators;
            var addOperatorsFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(addOperatorsFunction);
            */


            /** Function: confirmOwner**/
            /*
            var confirmOwnerFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<ConfirmOwnerFunction>();
            */


            /** Function: croDefiSwapCall**/
            /*
            var croDefiSwapCallFunction = new CroDefiSwapCallFunction();
            croDefiSwapCallFunction.Sender = sender;
            croDefiSwapCallFunction.Amount0 = amount0;
            croDefiSwapCallFunction.Amount1 = amount1;
            croDefiSwapCallFunction.Data = data;
            var croDefiSwapCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(croDefiSwapCallFunction);
            */


            /** Function: elkCall**/
            /*
            var elkCallFunction = new ElkCallFunction();
            elkCallFunction.Sender = sender;
            elkCallFunction.Amount0 = amount0;
            elkCallFunction.Amount1 = amount1;
            elkCallFunction.Data = data;
            var elkCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(elkCallFunction);
            */


            /** Function: factory**/
            /*
            var factoryFunction = new FactoryFunction();
            factoryFunction.ReturnValue1 = returnValue1;
            var factoryFunctionReturn = await contractHandler.QueryAsync<FactoryFunction, string>(factoryFunction);
            */


            /** Function: operators**/
            /*
            var operatorsFunction = new OperatorsFunction();
            operatorsFunction.ReturnValue1 = returnValue1;
            var operatorsFunctionReturn = await contractHandler.QueryAsync<OperatorsFunction, BigInteger>(operatorsFunction);
            */


            /** Function: orionpoolV2Call**/
            /*
            var orionpoolV2CallFunction = new OrionpoolV2CallFunction();
            orionpoolV2CallFunction.Sender = sender;
            orionpoolV2CallFunction.Amount0 = amount0;
            orionpoolV2CallFunction.Amount1 = amount1;
            orionpoolV2CallFunction.Data = data;
            var orionpoolV2CallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(orionpoolV2CallFunction);
            */


            /** Function: owner**/
            /*
            var ownerFunctionReturn = await contractHandler.QueryAsync<OwnerFunction, string>();
            */


            /** Function: pancakeCall**/
            /*
            var pancakeCallFunction = new PancakeCallFunction();
            pancakeCallFunction.Sender = sender;
            pancakeCallFunction.Amount0 = amount0;
            pancakeCallFunction.Amount1 = amount1;
            pancakeCallFunction.Data = data;
            var pancakeCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(pancakeCallFunction);
            */


            /** Function: plasmaswapCall**/
            /*
            var plasmaswapCallFunction = new PlasmaswapCallFunction();
            plasmaswapCallFunction.Sender = sender;
            plasmaswapCallFunction.Amount0 = amount0;
            plasmaswapCallFunction.Amount1 = amount1;
            plasmaswapCallFunction.Data = data;
            var plasmaswapCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(plasmaswapCallFunction);
            */


            /** Function: removeOperators**/
            /*
            var removeOperatorsFunction = new RemoveOperatorsFunction();
            removeOperatorsFunction.Operators = operators;
            var removeOperatorsFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(removeOperatorsFunction);
            */


            /** Function: setFactory**/
            /*
            var setFactoryFunction = new SetFactoryFunction();
            setFactoryFunction.DexName = dexName;
            setFactoryFunction.DexFactory = dexFactory;
            var setFactoryFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(setFactoryFunction);
            */


            /** Function: swapCall**/
            /*
            var swapCallFunction = new SwapCallFunction();
            swapCallFunction.Sender = sender;
            swapCallFunction.Amount0 = amount0;
            swapCallFunction.Amount1 = amount1;
            swapCallFunction.Data = data;
            var swapCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(swapCallFunction);
            */


            /** Function: swapsCall**/
            /*
            var swapsCallFunction = new SwapsCallFunction();
            swapsCallFunction.Sender = sender;
            swapsCallFunction.Amount0 = amount0;
            swapsCallFunction.Amount1 = amount1;
            swapsCallFunction.Data = data;
            var swapsCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(swapsCallFunction);
            */


            /** Function: taalCall**/
            /*
            var taalCallFunction = new TaalCallFunction();
            taalCallFunction.Sender = sender;
            taalCallFunction.Amount0 = amount0;
            taalCallFunction.Amount1 = amount1;
            taalCallFunction.Data = data;
            var taalCallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(taalCallFunction);
            */


            /** Function: uniswapV2Call**/
            /*
            var uniswapV2CallFunction = new UniswapV2CallFunction();
            uniswapV2CallFunction.Sender = sender;
            uniswapV2CallFunction.Amount0 = amount0;
            uniswapV2CallFunction.Amount1 = amount1;
            uniswapV2CallFunction.Data = data;
            var uniswapV2CallFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(uniswapV2CallFunction);
            */


            /** Function: updateOwner**/
            /*
            var updateOwnerFunction = new UpdateOwnerFunction();
            updateOwnerFunction.NewOwner = newOwner;
            var updateOwnerFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(updateOwnerFunction);
            */


            /** Function: withdrawErc20Token**/
            /*
            var withdrawErc20TokenFunction = new WithdrawErc20TokenFunction();
            withdrawErc20TokenFunction.Token = token;
            withdrawErc20TokenFunction.Amount = amount;
            var withdrawErc20TokenFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(withdrawErc20TokenFunction);
            */


            /** Function: withdrawNativeToken**/
            /*
            var withdrawNativeTokenFunction = new WithdrawNativeTokenFunction();
            withdrawNativeTokenFunction.Amount = amount;
            withdrawNativeTokenFunction.To = to;
            var withdrawNativeTokenFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(withdrawNativeTokenFunction);
            */
        }

    }

    public partial class LoopArbitrageDeployment : LoopArbitrageDeploymentBase
    {
        public LoopArbitrageDeployment() : base(BYTECODE) { }
        public LoopArbitrageDeployment(string byteCode) : base(byteCode) { }
    }

    public class LoopArbitrageDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "";
        public LoopArbitrageDeploymentBase() : base(BYTECODE) { }
        public LoopArbitrageDeploymentBase(string byteCode) : base(byteCode) { }

    }

    public partial class DooarSwapV2CallFunction : DooarSwapV2CallFunctionBase { }

    [Function("DooarSwapV2Call")]
    public class DooarSwapV2CallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class FlashloanArbitrageDebugCallFunction : FlashloanArbitrageDebugCallFunctionBase { }

    [Function("FlashloanArbitrageDebugCall", typeof(FlashloanArbitrageDebugCallOutputDTO))]
    public class FlashloanArbitrageDebugCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_tokenBorrow", 1)]
        public virtual string TokenBorrow { get; set; }
        [Parameter("address", "_pairBorrow", 2)]
        public virtual string PairBorrow { get; set; }
        [Parameter("uint256", "_loanFee", 3)]
        public virtual BigInteger LoanFee { get; set; }
        [Parameter("uint256", "_amount", 4)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "_amountOutMin", 5)]
        public virtual BigInteger AmountOutMin { get; set; }
        [Parameter("uint256[]", "swapFees", 6)]
        public virtual List<BigInteger> SwapFees { get; set; }
        [Parameter("address[]", "pairs", 7)]
        public virtual List<string> Pairs { get; set; }
        [Parameter("string", "_dexNameForLoan", 8)]
        public virtual string DexNameForLoan { get; set; }
    }

    public partial class FlashloanUniswapV2Function : FlashloanUniswapV2FunctionBase { }

    [Function("FlashloanUniswapV2")]
    public class FlashloanUniswapV2FunctionBase : FunctionMessage
    {
        [Parameter("address", "_tokenBorrow", 1)]
        public virtual string TokenBorrow { get; set; }
        [Parameter("address", "_pairBorrow", 2)]
        public virtual string PairBorrow { get; set; }
        [Parameter("uint256", "_loanFee", 3)]
        public virtual BigInteger LoanFee { get; set; }
        [Parameter("uint256", "_amount", 4)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "_amountOutMin", 5)]
        public virtual BigInteger AmountOutMin { get; set; }
        [Parameter("uint256[]", "swapFees", 6)]
        public virtual List<BigInteger> SwapFees { get; set; }
        [Parameter("address[]", "pairs", 7)]
        public virtual List<string> Pairs { get; set; }
        [Parameter("string", "_dexNameForLoan", 8)]
        public virtual string DexNameForLoan { get; set; }
    }

    public partial class LoopArbitrageV1DirectCallFunction : LoopArbitrageV1DirectCallFunctionBase { }

    [Function("LoopArbitrageV1DirectCall", "uint256")]
    public class LoopArbitrageV1DirectCallFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "amountIn", 1)]
        public virtual BigInteger AmountIn { get; set; }
        [Parameter("uint256", "amountOutMin", 2)]
        public virtual BigInteger AmountOutMin { get; set; }
        [Parameter("address", "token", 3)]
        public virtual string Token { get; set; }
        [Parameter("uint256[]", "swapFees", 4)]
        public virtual List<BigInteger> SwapFees { get; set; }
        [Parameter("address[]", "pairs", 5)]
        public virtual List<string> Pairs { get; set; }
    }

    public partial class PepeDexCallFunction : PepeDexCallFunctionBase { }

    [Function("PepeDexCall")]
    public class PepeDexCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class SaitaSwapCallFunction : SaitaSwapCallFunctionBase { }

    [Function("SaitaSwapCall")]
    public class SaitaSwapCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class SakeSwapCallFunction : SakeSwapCallFunctionBase { }

    [Function("SakeSwapCall")]
    public class SakeSwapCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class AddOperatorsFunction : AddOperatorsFunctionBase { }

    [Function("addOperators")]
    public class AddOperatorsFunctionBase : FunctionMessage
    {
        [Parameter("address[]", "_operators", 1)]
        public virtual List<string> Operators { get; set; }
    }

    public partial class ConfirmOwnerFunction : ConfirmOwnerFunctionBase { }

    [Function("confirmOwner")]
    public class ConfirmOwnerFunctionBase : FunctionMessage
    {

    }

    public partial class CroDefiSwapCallFunction : CroDefiSwapCallFunctionBase { }

    [Function("croDefiSwapCall")]
    public class CroDefiSwapCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class ElkCallFunction : ElkCallFunctionBase { }

    [Function("elkCall")]
    public class ElkCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class FactoryFunction : FactoryFunctionBase { }

    [Function("factory", "address")]
    public class FactoryFunctionBase : FunctionMessage
    {
        [Parameter("string", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class OperatorsFunction : OperatorsFunctionBase { }

    [Function("operators", "uint256")]
    public class OperatorsFunctionBase : FunctionMessage
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class OrionpoolV2CallFunction : OrionpoolV2CallFunctionBase { }

    [Function("orionpoolV2Call")]
    public class OrionpoolV2CallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class OwnerFunction : OwnerFunctionBase { }

    [Function("owner", "address")]
    public class OwnerFunctionBase : FunctionMessage
    {

    }

    public partial class PancakeCallFunction : PancakeCallFunctionBase { }

    [Function("pancakeCall")]
    public class PancakeCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class PlasmaswapCallFunction : PlasmaswapCallFunctionBase { }

    [Function("plasmaswapCall")]
    public class PlasmaswapCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class RemoveOperatorsFunction : RemoveOperatorsFunctionBase { }

    [Function("removeOperators")]
    public class RemoveOperatorsFunctionBase : FunctionMessage
    {
        [Parameter("address[]", "_operators", 1)]
        public virtual List<string> Operators { get; set; }
    }

    public partial class SetFactoryFunction : SetFactoryFunctionBase { }

    [Function("setFactory")]
    public class SetFactoryFunctionBase : FunctionMessage
    {
        [Parameter("string", "dexName", 1)]
        public virtual string DexName { get; set; }
        [Parameter("address", "dexFactory", 2)]
        public virtual string DexFactory { get; set; }
    }

    public partial class SwapCallFunction : SwapCallFunctionBase { }

    [Function("swapCall")]
    public class SwapCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class SwapsCallFunction : SwapsCallFunctionBase { }

    [Function("swapsCall")]
    public class SwapsCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class TaalCallFunction : TaalCallFunctionBase { }

    [Function("taalCall")]
    public class TaalCallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class UniswapV2CallFunction : UniswapV2CallFunctionBase { }

    [Function("uniswapV2Call")]
    public class UniswapV2CallFunctionBase : FunctionMessage
    {
        [Parameter("address", "_sender", 1)]
        public virtual string Sender { get; set; }
        [Parameter("uint256", "_amount0", 2)]
        public virtual BigInteger Amount0 { get; set; }
        [Parameter("uint256", "_amount1", 3)]
        public virtual BigInteger Amount1 { get; set; }
        [Parameter("bytes", "_data", 4)]
        public virtual byte[] Data { get; set; }
    }

    public partial class UpdateOwnerFunction : UpdateOwnerFunctionBase { }

    [Function("updateOwner")]
    public class UpdateOwnerFunctionBase : FunctionMessage
    {
        [Parameter("address", "_newOwner", 1)]
        public virtual string NewOwner { get; set; }
    }

    public partial class WithdrawErc20TokenFunction : WithdrawErc20TokenFunctionBase { }

    [Function("withdrawErc20Token")]
    public class WithdrawErc20TokenFunctionBase : FunctionMessage
    {
        [Parameter("address", "token", 1)]
        public virtual string Token { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class WithdrawNativeTokenFunction : WithdrawNativeTokenFunctionBase { }

    [Function("withdrawNativeToken")]
    public class WithdrawNativeTokenFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "amount", 1)]
        public virtual BigInteger Amount { get; set; }
        [Parameter("address", "to", 2)]
        public virtual string To { get; set; }
    }

    public partial class ArbResultEventDTO : ArbResultEventDTOBase { }

    [Event("ArbResult")]
    public class ArbResultEventDTOBase : IEventDTO
    {
        [Parameter("address", "token", 1, false)]
        public virtual string Token { get; set; }
        [Parameter("uint256", "amountIn", 2, false)]
        public virtual BigInteger AmountIn { get; set; }
        [Parameter("uint256", "ActualAmountOut", 3, false)]
        public virtual BigInteger ActualAmountOut { get; set; }
    }



    public partial class FlashloanArbitrageDebugCallOutputDTO : FlashloanArbitrageDebugCallOutputDTOBase { }

    [FunctionOutput]
    public class FlashloanArbitrageDebugCallOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "balanceBefore", 1)]
        public virtual BigInteger BalanceBefore { get; set; }
        [Parameter("uint256", "balanceAfter", 2)]
        public virtual BigInteger BalanceAfter { get; set; }
    }



















    public partial class FactoryOutputDTO : FactoryOutputDTOBase { }

    [FunctionOutput]
    public class FactoryOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class OperatorsOutputDTO : OperatorsOutputDTOBase { }

    [FunctionOutput]
    public class OperatorsOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }



    public partial class OwnerOutputDTO : OwnerOutputDTOBase { }

    [FunctionOutput]
    public class OwnerOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }






















}
