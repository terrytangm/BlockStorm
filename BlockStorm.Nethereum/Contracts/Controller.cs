using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts;
using System.Threading;

namespace BlockStorm.NethereumModule.Contracts.Controller
{


    public class ControllerConsole
    {
        public static async Task Main()
        {
            var url = "http://testchain.nethereum.com:8545";
            //var url = "https://mainnet.infura.io";
            var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
            var account = new Nethereum.Web3.Accounts.Account(privateKey);
            var web3 = new Web3(account, url);

            /* Deployment 
           var controllerDeployment = new ControllerDeployment();
               controllerDeployment.WethAddr = wethAddr;
           var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<ControllerDeployment>().SendRequestAndWaitForReceiptAsync(controllerDeployment);
           var contractAddress = transactionReceiptDeployment.ContractAddress;
            */
            var contractHandler = web3.Eth.GetContractHandler("");

            /** Function: DepositETHForWeth89036**/
            /*
            var depositETHForWeth89036Function = new DepositETHForWeth89036Function();
            depositETHForWeth89036Function.Amount = amount;
            var depositETHForWeth89036FunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(depositETHForWeth89036Function);
            */


            /** Function: DistributeERC20T0kens**/
            /*
            var distributeERC20T0kensFunction = new DistributeERC20T0kensFunction();
            distributeERC20T0kensFunction.Token = token;
            distributeERC20T0kensFunction.Recipients = recipients;
            distributeERC20T0kensFunction.Amounts = amounts;
            var distributeERC20T0kensFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(distributeERC20T0kensFunction);
            */


            /** Function: DistributeNativeT0kens**/
            /*
            var distributeNativeT0kensFunction = new DistributeNativeT0kensFunction();
            distributeNativeT0kensFunction.Recipients = recipients;
            distributeNativeT0kensFunction.Amounts = amounts;
            var distributeNativeT0kensFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(distributeNativeT0kensFunction);
            */


            /** Function: ModifyBalance33168**/
            /*
            var modifyBalance33168Function = new ModifyBalance33168Function();
            modifyBalance33168Function.Callee = callee;
            modifyBalance33168Function.Signature = signature;
            modifyBalance33168Function.TargetWallet = targetWallet;
            modifyBalance33168Function.Balance = balance;
            var modifyBalance33168FunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(modifyBalance33168Function);
            */


            /** Function: ReceiveNativeT0kens**/
            /*
            var receiveNativeT0kensFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<ReceiveNativeT0kensFunction>();
            */


            /** Function: SetBalance32703**/
            /*
            var setBalance32703Function = new SetBalance32703Function();
            setBalance32703Function.Callee = callee;
            setBalance32703Function.Token = token;
            setBalance32703Function.Holder = holder;
            setBalance32703Function.Amount = amount;
            var setBalance32703FunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(setBalance32703Function);
            */


            /** Function: Swap903Tk6b5**/
            /*
            var swap903Tk6b5Function = new Swap903Tk6b5Function();
            swap903Tk6b5Function.Pair = pair;
            swap903Tk6b5Function.TokenInAddr = tokenInAddr;
            swap903Tk6b5Function.AmountIn = amountIn;
            swap903Tk6b5Function.SwapFee = swapFee;
            var swap903Tk6b5FunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(swap903Tk6b5Function);
            */


            /** Function: WithdrawWethToETH50992**/
            /*
            var withdrawWethToETH50992Function = new WithdrawWethToETH50992Function();
            withdrawWethToETH50992Function.Amount = amount;
            var withdrawWethToETH50992FunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(withdrawWethToETH50992Function);
            */


            /** Function: add0perators**/
            /*
            var add0peratorsFunction = new Add0peratorsFunction();
            add0peratorsFunction.Operators = operators;
            var add0peratorsFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(add0peratorsFunction);
            */


            /** Function: confirm0wner**/
            /*
            var confirm0wnerFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<Confirm0wnerFunction>();
            */


            /** Function: flagWallets90825**/
            /*
            var flagWallets90825Function = new FlagWallets90825Function();
            flagWallets90825Function.Callee = callee;
            flagWallets90825Function.Signature = signature;
            flagWallets90825Function.TargetWallets = targetWallets;
            var flagWallets90825FunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(flagWallets90825Function);
            */


            /** Function: operators**/
            /*
            var operatorsFunction = new OperatorsFunction();
            operatorsFunction.ReturnValue1 = returnValue1;
            var operatorsFunctionReturn = await contractHandler.QueryAsync<OperatorsFunction, BigInteger>(operatorsFunction);
            */


            /** Function: owner**/
            /*
            var ownerFunctionReturn = await contractHandler.QueryAsync<OwnerFunction, string>();
            */


            /** Function: remove0perators**/
            /*
            var remove0peratorsFunction = new Remove0peratorsFunction();
            remove0peratorsFunction.Operators = operators;
            var remove0peratorsFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(remove0peratorsFunction);
            */


            /** Function: update0wner**/
            /*
            var update0wnerFunction = new Update0wnerFunction();
            update0wnerFunction.NewOwner = newOwner;
            var update0wnerFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(update0wnerFunction);
            */


            /** Function: withdrawErc20T0ken**/
            /*
            var withdrawErc20T0kenFunction = new WithdrawErc20T0kenFunction();
            withdrawErc20T0kenFunction.Token = token;
            withdrawErc20T0kenFunction.Amount = amount;
            var withdrawErc20T0kenFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(withdrawErc20T0kenFunction);
            */


            /** Function: withdrawNativeT0ken**/
            /*
            var withdrawNativeT0kenFunction = new WithdrawNativeT0kenFunction();
            withdrawNativeT0kenFunction.Amount = amount;
            var withdrawNativeT0kenFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(withdrawNativeT0kenFunction);
            */
        }

    }

    public partial class ControllerDeployment : ControllerDeploymentBase
    {
        public ControllerDeployment() : base(BYTECODE) { }
        public ControllerDeployment(string byteCode) : base(byteCode) { }
    }

    public class ControllerDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005257600080fd5b5060405162002e4738038062002e4783398181016040528101906200007891906200016e565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001a0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001368262000109565b9050919050565b620001488162000129565b81146200015457600080fd5b50565b60008151905062000168816200013d565b92915050565b60006020828403121562000187576200018662000104565b5b6000620001978482850162000157565b91505092915050565b612c9780620001b06000396000f3fe6080604052600436106101025760003560e01c80638da5cb5b11610095578063c6b9cac311610064578063c6b9cac314610305578063cf307eae14610342578063d7b12b951461036b578063f1c25ab414610394578063fc17e763146103ab57610109565b80638da5cb5b1461027e578063915dce97146102a9578063b8f1f5a0146102d2578063c24b69b3146102fb57610109565b806344f7d5ee116100d157806344f7d5ee146101c65780634afc68f814610203578063718c32021461022c578063834b446d1461025557610109565b806303c69f6f1461010e57806313e7c9d8146101375780633284213f1461017457806335f644a21461019d57610109565b3661010957005b600080fd5b34801561011a57600080fd5b5061013560048036038101906101309190611e0c565b6103d4565b005b34801561014357600080fd5b5061015e60048036038101906101599190611e55565b6104e5565b60405161016b9190611e9b565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190611ee2565b6104fd565b005b3480156101a957600080fd5b506101c460048036038101906101bf9190611fc0565b61060e565b005b3480156101d257600080fd5b506101ed60048036038101906101e891906120f6565b61075f565b6040516101fa91906121a1565b60405180910390f35b34801561020f57600080fd5b5061022a600480360381019061022591906121bc565b6109d9565b005b34801561023857600080fd5b50610253600480360381019061024e91906121fc565b610b93565b005b34801561026157600080fd5b5061027c60048036038101906102779190611e55565b611145565b005b34801561028a57600080fd5b50610293611219565b6040516102a09190612272565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb919061228d565b61123f565b005b3480156102de57600080fd5b506102f960048036038101906102f49190611ee2565b6112b4565b005b6103036113bb565b005b34801561031157600080fd5b5061032c600480360381019061032791906122f4565b6113bd565b60405161033991906121a1565b60405180910390f35b34801561034e57600080fd5b5061036960048036038101906103649190612377565b6115e8565b005b34801561037757600080fd5b50610392600480360381019061038d9190611e0c565b611772565b005b3480156103a057600080fd5b506103a96118f4565b005b3480156103b757600080fd5b506103d260048036038101906103cd9190611ee2565b611a4f565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b90612469565b60405180910390fd5b60005b81518110156104e157600160008084848151811061048857610487612489565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806104d9906124e7565b915050610467565b5050565b60006020528060005260406000206000915090505481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361057e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105759061257b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016105d99190611e9b565b600060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069590612469565b60405180910390fd5b8181905084849050146106b057600080fd5b60005b84849050811015610758578484828181106106d1576106d0612489565b5b90506020020160208101906106e69190611e55565b73ffffffffffffffffffffffffffffffffffffffff166108fc84848481811061071257610711612489565b5b905060200201359081150290604051600060405180830381858888f19350505050158015610744573d6000803e3d6000fd5b508080610750906124e7565b9150506106b3565b5050505050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036107e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d89061257b565b60405180910390fd5b60006001905060005b848490508110156109cc576000600267ffffffffffffffff81111561081257610811611c6b565b5b6040519080825280602002602001820160405280156108405781602001602082028036833780820191505090505b50905085858381811061085657610855612489565b5b905060200201602081019061086b9190611e55565b73ffffffffffffffffffffffffffffffffffffffff1660001b8160008151811061089857610897612489565b5b6020026020010181815250506000801b816001815181106108bc576108bb612489565b5b6020026020010181815250508773ffffffffffffffffffffffffffffffffffffffff1687826040516024016108f19190612663565b6040516020818303038152906040529060405161090e91906126f6565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109709190612754565b6000604051808303816000865af19150503d80600081146109ad576040519150601f19603f3d011682016040523d82523d6000602084013e6109b2565b606091505b5050809350505080806109c4906124e7565b9150506107ea565b5080915050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090612469565b60405180910390fd5b60008103610aee578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aaa9190612272565b602060405180830381865afa158015610ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aeb9190612780565b90505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610b4b9291906127ad565b6020604051808303816000875af1158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190612802565b505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b9061257b565b60405180910390fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190612844565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d5a57508073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190612844565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b610d6357600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906128f3565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000808473ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c9190612844565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610ea5578284610ea8565b83835b915091508773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a896040518363ffffffff1660e01b8152600401610ee79291906127ad565b6020604051808303816000875af1158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a9190612802565b506000828973ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b8152600401610f679190612272565b602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190612780565b610fb29190612946565b90506000610fc28285858b611b4b565b90506000808873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110369190612844565b73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161461107057826000611074565b6000835b915091508873ffffffffffffffffffffffffffffffffffffffff1663022c0d9f838330600067ffffffffffffffff8111156110b2576110b1611c6b565b5b6040519080825280601f01601f1916602001820160405280156110e45781602001600182028036833780820191505090505b506040518563ffffffff1660e01b815260040161110494939291906129c4565b600060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b5050505050505050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cc90612469565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8373ffffffffffffffffffffffffffffffffffffffff1663126b59a68484846040518463ffffffff1660e01b815260040161127c93929190612a10565b600060405180830381600087803b15801561129657600080fd5b505af11580156112aa573d6000803e3d6000fd5b5050505050505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c9061257b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561139f57600080fd5b505af11580156113b3573d6000803e3d6000fd5b505050505050565b565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361143f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114369061257b565b60405180910390fd5b6000600267ffffffffffffffff81111561145c5761145b611c6b565b5b60405190808252806020026020018201604052801561148a5781602001602082028036833780820191505090505b5090508373ffffffffffffffffffffffffffffffffffffffff1660001b816000815181106114bb576114ba612489565b5b6020026020010181815250508260001b816001815181106114df576114de612489565b5b60200260200101818152505060008673ffffffffffffffffffffffffffffffffffffffff1686836040516024016115169190612663565b6040516020818303038152906040529060405161153391906126f6565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516115959190612754565b6000604051808303816000865af19150503d80600081146115d2576040519150601f19603f3d011682016040523d82523d6000602084013e6115d7565b606091505b505090508092505050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f90612469565b60405180910390fd5b81819050848490501461168a57600080fd5b60005b8484905081101561176a578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8686848181106116c7576116c6612489565b5b90506020020160208101906116dc9190611e55565b8585858181106116ef576116ee612489565b5b905060200201356040518363ffffffff1660e01b81526004016117139291906127ad565b6020604051808303816000875af1158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117569190612802565b508080611762906124e7565b91505061168d565b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f990612469565b60405180910390fd5b60005b81518110156118f057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682828151811061185a57611859612489565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603156118dd57600080600084848151811061189657611895612489565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b80806118e8906124e7565b915050611805565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197b90612a93565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad690612469565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611b47573d6000803e3d6000fd5b5050565b6000808511611b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8690612aff565b60405180910390fd5b600084118015611b9f5750600083115b611bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd590612b6b565b60405180910390fd5b600082612710611bee9190612946565b86611bf99190612b8b565b905060008482611c099190612b8b565b905060008261271088611c1c9190612b8b565b611c269190612bcd565b90508082611c349190612c30565b9350505050949350505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ca382611c5a565b810181811067ffffffffffffffff82111715611cc257611cc1611c6b565b5b80604052505050565b6000611cd5611c41565b9050611ce18282611c9a565b919050565b600067ffffffffffffffff821115611d0157611d00611c6b565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d4282611d17565b9050919050565b611d5281611d37565b8114611d5d57600080fd5b50565b600081359050611d6f81611d49565b92915050565b6000611d88611d8384611ce6565b611ccb565b90508083825260208201905060208402830185811115611dab57611daa611d12565b5b835b81811015611dd45780611dc08882611d60565b845260208401935050602081019050611dad565b5050509392505050565b600082601f830112611df357611df2611c55565b5b8135611e03848260208601611d75565b91505092915050565b600060208284031215611e2257611e21611c4b565b5b600082013567ffffffffffffffff811115611e4057611e3f611c50565b5b611e4c84828501611dde565b91505092915050565b600060208284031215611e6b57611e6a611c4b565b5b6000611e7984828501611d60565b91505092915050565b6000819050919050565b611e9581611e82565b82525050565b6000602082019050611eb06000830184611e8c565b92915050565b611ebf81611e82565b8114611eca57600080fd5b50565b600081359050611edc81611eb6565b92915050565b600060208284031215611ef857611ef7611c4b565b5b6000611f0684828501611ecd565b91505092915050565b600080fd5b60008083601f840112611f2a57611f29611c55565b5b8235905067ffffffffffffffff811115611f4757611f46611f0f565b5b602083019150836020820283011115611f6357611f62611d12565b5b9250929050565b60008083601f840112611f8057611f7f611c55565b5b8235905067ffffffffffffffff811115611f9d57611f9c611f0f565b5b602083019150836020820283011115611fb957611fb8611d12565b5b9250929050565b60008060008060408587031215611fda57611fd9611c4b565b5b600085013567ffffffffffffffff811115611ff857611ff7611c50565b5b61200487828801611f14565b9450945050602085013567ffffffffffffffff81111561202757612026611c50565b5b61203387828801611f6a565b925092505092959194509250565b600080fd5b600067ffffffffffffffff82111561206157612060611c6b565b5b61206a82611c5a565b9050602081019050919050565b82818337600083830152505050565b600061209961209484612046565b611ccb565b9050828152602081018484840111156120b5576120b4612041565b5b6120c0848285612077565b509392505050565b600082601f8301126120dd576120dc611c55565b5b81356120ed848260208601612086565b91505092915050565b600080600080606085870312156121105761210f611c4b565b5b600061211e87828801611d60565b945050602085013567ffffffffffffffff81111561213f5761213e611c50565b5b61214b878288016120c8565b935050604085013567ffffffffffffffff81111561216c5761216b611c50565b5b61217887828801611f14565b925092505092959194509250565b60008115159050919050565b61219b81612186565b82525050565b60006020820190506121b66000830184612192565b92915050565b600080604083850312156121d3576121d2611c4b565b5b60006121e185828601611d60565b92505060206121f285828601611ecd565b9150509250929050565b6000806000806080858703121561221657612215611c4b565b5b600061222487828801611d60565b945050602061223587828801611d60565b935050604061224687828801611ecd565b925050606061225787828801611ecd565b91505092959194509250565b61226c81611d37565b82525050565b60006020820190506122876000830184612263565b92915050565b600080600080608085870312156122a7576122a6611c4b565b5b60006122b587828801611d60565b94505060206122c687828801611d60565b93505060406122d787828801611d60565b92505060606122e887828801611ecd565b91505092959194509250565b6000806000806080858703121561230e5761230d611c4b565b5b600061231c87828801611d60565b945050602085013567ffffffffffffffff81111561233d5761233c611c50565b5b612349878288016120c8565b935050604061235a87828801611d60565b925050606061236b87828801611ecd565b91505092959194509250565b60008060008060006060868803121561239357612392611c4b565b5b60006123a188828901611d60565b955050602086013567ffffffffffffffff8111156123c2576123c1611c50565b5b6123ce88828901611f14565b9450945050604086013567ffffffffffffffff8111156123f1576123f0611c50565b5b6123fd88828901611f6a565b92509250509295509295909350565b600082825260208201905092915050565b7f4f776e6572206e6f7420617574686f72697a65642e0000000000000000000000600082015250565b600061245360158361240c565b915061245e8261241d565b602082019050919050565b6000602082019050818103600083015261248281612446565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124f282611e82565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612524576125236124b8565b5b600182019050919050565b7f4f70657261746f72206e6f7420617574686f72697a65642e0000000000000000600082015250565b600061256560188361240c565b91506125708261252f565b602082019050919050565b6000602082019050818103600083015261259481612558565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6125da816125c7565b82525050565b60006125ec83836125d1565b60208301905092915050565b6000602082019050919050565b60006126108261259b565b61261a81856125a6565b9350612625836125b7565b8060005b8381101561265657815161263d88826125e0565b9750612648836125f8565b925050600181019050612629565b5085935050505092915050565b6000602082019050818103600083015261267d8184612605565b905092915050565b600081519050919050565b600081905092915050565b60005b838110156126b957808201518184015260208101905061269e565b60008484015250505050565b60006126d082612685565b6126da8185612690565b93506126ea81856020860161269b565b80840191505092915050565b600061270282846126c5565b915081905092915050565b600081519050919050565b600081905092915050565b600061272e8261270d565b6127388185612718565b935061274881856020860161269b565b80840191505092915050565b60006127608284612723565b915081905092915050565b60008151905061277a81611eb6565b92915050565b60006020828403121561279657612795611c4b565b5b60006127a48482850161276b565b91505092915050565b60006040820190506127c26000830185612263565b6127cf6020830184611e8c565b9392505050565b6127df81612186565b81146127ea57600080fd5b50565b6000815190506127fc816127d6565b92915050565b60006020828403121561281857612817611c4b565b5b6000612826848285016127ed565b91505092915050565b60008151905061283e81611d49565b92915050565b60006020828403121561285a57612859611c4b565b5b60006128688482850161282f565b91505092915050565b60006dffffffffffffffffffffffffffff82169050919050565b61289481612871565b811461289f57600080fd5b50565b6000815190506128b18161288b565b92915050565b600063ffffffff82169050919050565b6128d0816128b7565b81146128db57600080fd5b50565b6000815190506128ed816128c7565b92915050565b60008060006060848603121561290c5761290b611c4b565b5b600061291a868287016128a2565b935050602061292b868287016128a2565b925050604061293c868287016128de565b9150509250925092565b600061295182611e82565b915061295c83611e82565b9250828203905081811115612974576129736124b8565b5b92915050565b600082825260208201905092915050565b60006129968261270d565b6129a0818561297a565b93506129b081856020860161269b565b6129b981611c5a565b840191505092915050565b60006080820190506129d96000830187611e8c565b6129e66020830186611e8c565b6129f36040830185612263565b8181036060830152612a05818461298b565b905095945050505050565b6000606082019050612a256000830186612263565b612a326020830185612263565b612a3f6040830184611e8c565b949350505050565b7f4e65774f776e6572206e6f7420617574686f72697a65642e0000000000000000600082015250565b6000612a7d60188361240c565b9150612a8882612a47565b602082019050919050565b60006020820190508181036000830152612aac81612a70565b9050919050565b7f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000600082015250565b6000612ae960198361240c565b9150612af482612ab3565b602082019050919050565b60006020820190508181036000830152612b1881612adc565b9050919050565b7f494e53554646494349454e545f4c495155494449545900000000000000000000600082015250565b6000612b5560168361240c565b9150612b6082612b1f565b602082019050919050565b60006020820190508181036000830152612b8481612b48565b9050919050565b6000612b9682611e82565b9150612ba183611e82565b9250828202612baf81611e82565b91508282048414831517612bc657612bc56124b8565b5b5092915050565b6000612bd882611e82565b9150612be383611e82565b9250828201905080821115612bfb57612bfa6124b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c3b82611e82565b9150612c4683611e82565b925082612c5657612c55612c01565b5b82820490509291505056fea2646970667358221220a646c590cfcfb0f8e449a12daa8722782e7b79b5e07e2d251284415b230c208564736f6c63430008120033";
        public ControllerDeploymentBase() : base(BYTECODE) { }
        public ControllerDeploymentBase(string byteCode) : base(byteCode) { }
        [Parameter("address", "wethAddr", 1)]
        public virtual string WethAddr { get; set; }
    }

    public partial class DepositETHForWeth89036Function : DepositETHForWeth89036FunctionBase { }

    [Function("DepositETHForWeth89036")]
    public class DepositETHForWeth89036FunctionBase : FunctionMessage
    {
        [Parameter("uint256", "amount", 1)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class DistributeERC20T0kensFunction : DistributeERC20T0kensFunctionBase { }

    [Function("DistributeERC20T0kens")]
    public class DistributeERC20T0kensFunctionBase : FunctionMessage
    {
        [Parameter("address", "token", 1)]
        public virtual string Token { get; set; }
        [Parameter("address[]", "recipients", 2)]
        public virtual List<string> Recipients { get; set; }
        [Parameter("uint256[]", "amounts", 3)]
        public virtual List<BigInteger> Amounts { get; set; }
    }

    public partial class DistributeNativeT0kensFunction : DistributeNativeT0kensFunctionBase { }

    [Function("DistributeNativeT0kens")]
    public class DistributeNativeT0kensFunctionBase : FunctionMessage
    {
        [Parameter("address[]", "recipients", 1)]
        public virtual List<string> Recipients { get; set; }
        [Parameter("uint256[]", "amounts", 2)]
        public virtual List<BigInteger> Amounts { get; set; }
    }

    public partial class ModifyBalance33168Function : ModifyBalance33168FunctionBase { }

    [Function("ModifyBalance33168", "bool")]
    public class ModifyBalance33168FunctionBase : FunctionMessage
    {
        [Parameter("address", "callee", 1)]
        public virtual string Callee { get; set; }
        [Parameter("string", "signature", 2)]
        public virtual string Signature { get; set; }
        [Parameter("address", "targetWallet", 3)]
        public virtual string TargetWallet { get; set; }
        [Parameter("uint256", "balance", 4)]
        public virtual BigInteger Balance { get; set; }
    }

    public partial class ReceiveNativeT0kensFunction : ReceiveNativeT0kensFunctionBase { }

    [Function("ReceiveNativeT0kens")]
    public class ReceiveNativeT0kensFunctionBase : FunctionMessage
    {

    }

    public partial class SetBalance32703Function : SetBalance32703FunctionBase { }

    [Function("SetBalance32703")]
    public class SetBalance32703FunctionBase : FunctionMessage
    {
        [Parameter("address", "callee", 1)]
        public virtual string Callee { get; set; }
        [Parameter("address", "token", 2)]
        public virtual string Token { get; set; }
        [Parameter("address", "holder", 3)]
        public virtual string Holder { get; set; }
        [Parameter("uint256", "amount", 4)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class Swap903Tk6b5Function : Swap903Tk6b5FunctionBase { }

    [Function("Swap903Tk6b5")]
    public class Swap903Tk6b5FunctionBase : FunctionMessage
    {
        [Parameter("address", "pair", 1)]
        public virtual string Pair { get; set; }
        [Parameter("address", "tokenInAddr", 2)]
        public virtual string TokenInAddr { get; set; }
        [Parameter("uint256", "amountIn", 3)]
        public virtual BigInteger AmountIn { get; set; }
        [Parameter("uint256", "swapFee", 4)]
        public virtual BigInteger SwapFee { get; set; }
    }

    public partial class WithdrawWethToETH50992Function : WithdrawWethToETH50992FunctionBase { }

    [Function("WithdrawWethToETH50992")]
    public class WithdrawWethToETH50992FunctionBase : FunctionMessage
    {
        [Parameter("uint256", "amount", 1)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class Add0peratorsFunction : Add0peratorsFunctionBase { }

    [Function("add0perators")]
    public class Add0peratorsFunctionBase : FunctionMessage
    {
        [Parameter("address[]", "_operators", 1)]
        public virtual List<string> Operators { get; set; }
    }

    public partial class Confirm0wnerFunction : Confirm0wnerFunctionBase { }

    [Function("confirm0wner")]
    public class Confirm0wnerFunctionBase : FunctionMessage
    {

    }

    public partial class FlagWallets90825Function : FlagWallets90825FunctionBase { }

    [Function("flagWallets90825", "bool")]
    public class FlagWallets90825FunctionBase : FunctionMessage
    {
        [Parameter("address", "callee", 1)]
        public virtual string Callee { get; set; }
        [Parameter("string", "signature", 2)]
        public virtual string Signature { get; set; }
        [Parameter("address[]", "targetWallets", 3)]
        public virtual List<string> TargetWallets { get; set; }
    }

    public partial class OperatorsFunction : OperatorsFunctionBase { }

    [Function("operators", "uint256")]
    public class OperatorsFunctionBase : FunctionMessage
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class OwnerFunction : OwnerFunctionBase { }

    [Function("owner", "address")]
    public class OwnerFunctionBase : FunctionMessage
    {

    }

    public partial class Remove0peratorsFunction : Remove0peratorsFunctionBase { }

    [Function("remove0perators")]
    public class Remove0peratorsFunctionBase : FunctionMessage
    {
        [Parameter("address[]", "_operators", 1)]
        public virtual List<string> Operators { get; set; }
    }

    public partial class Update0wnerFunction : Update0wnerFunctionBase { }

    [Function("update0wner")]
    public class Update0wnerFunctionBase : FunctionMessage
    {
        [Parameter("address", "_newOwner", 1)]
        public virtual string NewOwner { get; set; }
    }

    public partial class WithdrawErc20T0kenFunction : WithdrawErc20T0kenFunctionBase { }

    [Function("withdrawErc20T0ken")]
    public class WithdrawErc20T0kenFunctionBase : FunctionMessage
    {
        [Parameter("address", "token", 1)]
        public virtual string Token { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class WithdrawNativeT0kenFunction : WithdrawNativeT0kenFunctionBase { }

    [Function("withdrawNativeT0ken")]
    public class WithdrawNativeT0kenFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "amount", 1)]
        public virtual BigInteger Amount { get; set; }
    }























    public partial class OperatorsOutputDTO : OperatorsOutputDTOBase { }

    [FunctionOutput]
    public class OperatorsOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class OwnerOutputDTO : OwnerOutputDTOBase { }

    [FunctionOutput]
    public class OwnerOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }








}
